use std::str::FromStr;

use crate::ast::expr::const_expr::primitive::{UsizeExpr,F64Expr,Err};
use crate::ast::expr::Op2;
use crate::ast::types::primitive::Type;
use lalrpop_util::ParseError;


grammar;

extern {
    type Error = Err;
}

Type: Type = {
    "usize" => Type::Usize,
    "f64" => Type::F64,
} 
match{
    r"[0-9]+"=> Us,
}else{
    r"[-+]?[0-9]*(\.[0-9]*([eE][-+]?[0-9]+)?|\.?[0-9]+[eE][-+]?[0-9]+)"=> Fl,
    _
}

pub UsizeExpr: Box<UsizeExpr> = {
    #[precedence(level="0")] // Highest precedence
    UsizeTerm,
    #[precedence(level="1")] #[assoc(side="left")]
    <l:UsizeExpr> "*" <r:UsizeExpr> => Box::new(UsizeExpr::Op2(l, Op2::Mul, r)),
    <l:UsizeExpr> "/" <r:UsizeExpr> => Box::new(UsizeExpr::Op2(l, Op2::Div, r)),
    #[precedence(level="2")] #[assoc(side="left")]
    <l:UsizeExpr> "+" <r:UsizeExpr> => Box::new(UsizeExpr::Op2(l, Op2::Add, r)),
    <l:UsizeExpr> "-" <r:UsizeExpr> => Box::new(UsizeExpr::Op2(l, Op2::Sub, r)),
};

UsizeTerm: Box<UsizeExpr> = {
    "(" <UsizeExpr> ")" ,
    Usize => Box::new(UsizeExpr::Usize(<>)),
};


Usize: usize = {
    Us =>? usize::from_str(<>)
                        .map_err(|_| ParseError::User { error: Err::UsizeTooLarge }),
};
pub F64Expr: Box<F64Expr> = {
    #[precedence(level="0")] // Highest precedence
    F64Term,
    #[precedence(level="1")] #[assoc(side="left")]
    <l:F64Expr> "*" <r:F64Expr> => Box::new(F64Expr::Op2(l, Op2::Mul, r)),
    <l:F64Expr> "/" <r:F64Expr> => Box::new(F64Expr::Op2(l, Op2::Div, r)),
    #[precedence(level="2")] #[assoc(side="left")]
    <l:F64Expr> <r:F64Expr> => Box::new(F64Expr::Op2(l, Op2::Add, r)),
    // <l:F64Expr> "+" <r:F64Expr> => Box::new(F64Expr::Op(l, Op::Add, r)),
    // <l:F64Expr> "-" <r:F64Expr> => Box::new(F64Expr::Op(l, Op::Sub, r)),
};

F64Term: Box<F64Expr> = {
    "(" <F64Expr> ")" ,
    F64 => Box::new(F64Expr::F64(<>)),
};

F64: f64 = {
    Fl =>? f64::from_str(<>)
                        .map_err(|_| ParseError::User { error: Err::F64ParseError }),
    "NaN" => f64::NAN,
    "Infinity" => f64::INFINITY,
    "-Infinity" => f64::NEG_INFINITY,
};