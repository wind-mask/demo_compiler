use std::str::FromStr;

use crate::ast::expr::{Expr,Op,Err};
use crate::ast::assignment::Assignment;
use crate::ast::types::Type;
use lalrpop_util::ParseError;


grammar;

extern {
    type Error = Err;
}

pub Assignment: Box<Assignment>={
    <type_:Type> <identitier:Identitier> "=" <expr:Expr> => Box::new(Assignment::Var(type_,identitier,expr)),
}




Type: Type = {
    "usize" => Type::Usize,
    "bool" => Type::Bool,
} 

Identitier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
};
pub Expr: Box<Expr> = {
    #[precedence(level="0")] // Highest precedence
    Term,
    #[precedence(level="1")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => Box::new(Expr::Op(l, Op::Mul, r)),
    <l:Expr> "/" <r:Expr> => Box::new(Expr::Op(l, Op::Div, r)),
    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => Box::new(Expr::Op(l, Op::Add, r)),
    <l:Expr> "-" <r:Expr> => Box::new(Expr::Op(l, Op::Sub, r)),
};

Term: Box<Expr> = {
    "(" <Expr> ")" ,
    Number => Box::new(Expr::Num(<>)),
};

Number: usize = {
    r"[0-9]+" =>? usize::from_str(<>)
                        .map_err(|_| ParseError::User { error: Err::UsizeTooLarge }),
};